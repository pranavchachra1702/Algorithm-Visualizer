{"ast":null,"code":"// import React, { Component } from 'react';\n// import './App.css';\n// import AppControls from './components/AppControls';\n// import TopBar from './components/TopBar';\n// import SortVisualizer from './components/SortVisualizer';\n// import Footer from './components/Footer';\n// import BubbleSort, {\n//   BubbleSortKey,\n//   BubbleSortDesc\n// } from './algorithms/BubbleSort';\n// import SelectionSort, {\n//   SelectionSortKey,\n//   SelectionSortDesc\n// } from './algorithms/SelectionSort';\n// import InsertionSort, {\n//   InsertionSortKey,\n//   InsertionSortDesc\n// } from './algorithms/InsertionSort';\n// import MergeSort, {\n//   MergeSortKey,\n//   MergeSortDesc\n// } from './algorithms/MergeSort';\n// import QuickSort, {\n//   QuickSortKey,\n//   QuickSortDesc\n// } from './algorithms/QuickSort';\n// import HeapSort, {\n//   HeapSortKey,\n//   HeapSortDesc\n// } from './algorithms/HeapSort';\n// class App extends Component {\n//   state = {\n//     array: [],\n//     arraySize: 10,\n//     trace: [],\n//     algorithm: null,\n//     appDrawerOpen: false\n//   };\n//   ALGORITHM = {\n//     'Bubble Sort': BubbleSort,\n//     'Selection Sort': SelectionSort,\n//     'Insertion Sort': InsertionSort,\n//     'Merge Sort': MergeSort,\n//     'Quick Sort': QuickSort,\n//     'Heap Sort': HeapSort\n//   };\n//   ALGORITHM_KEY = {\n//     'Bubble Sort': BubbleSortKey,\n//     'Selection Sort': SelectionSortKey,\n//     'Insertion Sort': InsertionSortKey,\n//     'Merge Sort': MergeSortKey,\n//     'Quick Sort': QuickSortKey,\n//     'Heap Sort': HeapSortKey\n//   };\n//   ALGORITHM_DESC = {\n//     'Bubble Sort': BubbleSortDesc,\n//     'Selection Sort': SelectionSortDesc,\n//     'Insertion Sort': InsertionSortDesc,\n//     'Merge Sort': MergeSortDesc,\n//     'Quick Sort': QuickSortDesc,\n//     'Heap Sort': HeapSortDesc\n//   };\n//   componentDidMount() {\n//     this.generateRandomArray();\n//   }\n//   generateRandomArray = () => {\n//     // Generate pseudo-random number between 1 and max\n//     function getRandomInt(max) {\n//       return Math.floor(Math.random() * Math.floor(max)) + 4;\n//     }\n//     // Generate an array of length max\n//     const array = Array(this.state.arraySize)\n//       .fill(0)\n//       .map(() => getRandomInt(this.state.arraySize * 5));\n//     this.setState(\n//       {\n//         array,\n//         trace: []\n//       },\n//       this.createTrace\n//     );\n//   };\n//   handleAlgorithmChange = (algorithm) => {\n//     this.setState({ algorithm }, this.generateRandomArray);\n//   };\n//   handleArraySizeChange = (size) => {\n//     size = Number(size);\n//     size = size > 50 ? 50 : size;\n//     size = size < 0 ? 0 : size;\n//     this.setState({ arraySize: size }, this.generateRandomArray);\n//   };\n//   createTrace = () => {\n//     const numbers = [...this.state.array];\n//     const sort = this.ALGORITHM[this.state.algorithm];\n//     if (sort) {\n//       const trace = sort(numbers);\n//       this.setState({ trace });\n//     }\n//   };\n//   render() {\n//     let theme = `App`;\n//     if (this.state.appDrawerOpen) theme += ` App_modal_open`;\n//     const colorKey = this.ALGORITHM_KEY[this.state.algorithm];\n//     const desc = this.ALGORITHM_DESC[this.state.algorithm];\n//     const controls = (\n//       <AppControls\n//         onGenerateRandomArray={this.generateRandomArray}\n//         algorithm={this.state.algorithm}\n//         onAlgorithmChange={this.handleAlgorithmChange}\n//         arraySize={this.state.arraySize}\n//         onArraySizeChange={this.handleArraySizeChange}\n//       />\n//     );\n//     return (\n//       <div className={theme}>\n//         <TopBar\n//           drawerOpen={this.state.appDrawerOpen}\n//           toggleDrawer={this.toggleAppDrawer}\n//         >\n//           {controls}\n//         </TopBar>\n//         <main className=\"App__Body\">\n//           <SortVisualizer\n//             array={this.state.array}\n//             trace={this.state.trace}\n//             colorKey={colorKey}\n//             desc={desc}\n//           />\n//         </main>\n//         <Footer />\n//       </div>\n//     );\n//   }\n// }\n// export default App;","map":{"version":3,"sources":["/Users/pranavchachra/Desktop/Algorithm-Visualizer/src/App.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\n// import './App.css';\n\n// import AppControls from './components/AppControls';\n// import TopBar from './components/TopBar';\n// import SortVisualizer from './components/SortVisualizer';\n// import Footer from './components/Footer';\n\n// import BubbleSort, {\n//   BubbleSortKey,\n//   BubbleSortDesc\n// } from './algorithms/BubbleSort';\n// import SelectionSort, {\n//   SelectionSortKey,\n//   SelectionSortDesc\n// } from './algorithms/SelectionSort';\n// import InsertionSort, {\n//   InsertionSortKey,\n//   InsertionSortDesc\n// } from './algorithms/InsertionSort';\n// import MergeSort, {\n//   MergeSortKey,\n//   MergeSortDesc\n// } from './algorithms/MergeSort';\n// import QuickSort, {\n//   QuickSortKey,\n//   QuickSortDesc\n// } from './algorithms/QuickSort';\n// import HeapSort, {\n//   HeapSortKey,\n//   HeapSortDesc\n// } from './algorithms/HeapSort';\n\n// class App extends Component {\n//   state = {\n//     array: [],\n//     arraySize: 10,\n//     trace: [],\n//     algorithm: null,\n//     appDrawerOpen: false\n//   };\n\n//   ALGORITHM = {\n//     'Bubble Sort': BubbleSort,\n//     'Selection Sort': SelectionSort,\n//     'Insertion Sort': InsertionSort,\n//     'Merge Sort': MergeSort,\n//     'Quick Sort': QuickSort,\n//     'Heap Sort': HeapSort\n//   };\n\n//   ALGORITHM_KEY = {\n//     'Bubble Sort': BubbleSortKey,\n//     'Selection Sort': SelectionSortKey,\n//     'Insertion Sort': InsertionSortKey,\n//     'Merge Sort': MergeSortKey,\n//     'Quick Sort': QuickSortKey,\n//     'Heap Sort': HeapSortKey\n//   };\n\n//   ALGORITHM_DESC = {\n//     'Bubble Sort': BubbleSortDesc,\n//     'Selection Sort': SelectionSortDesc,\n//     'Insertion Sort': InsertionSortDesc,\n//     'Merge Sort': MergeSortDesc,\n//     'Quick Sort': QuickSortDesc,\n//     'Heap Sort': HeapSortDesc\n//   };\n\n//   componentDidMount() {\n//     this.generateRandomArray();\n//   }\n\n//   generateRandomArray = () => {\n//     // Generate pseudo-random number between 1 and max\n//     function getRandomInt(max) {\n//       return Math.floor(Math.random() * Math.floor(max)) + 4;\n//     }\n\n//     // Generate an array of length max\n//     const array = Array(this.state.arraySize)\n//       .fill(0)\n//       .map(() => getRandomInt(this.state.arraySize * 5));\n\n//     this.setState(\n//       {\n//         array,\n//         trace: []\n//       },\n//       this.createTrace\n//     );\n//   };\n\n//   handleAlgorithmChange = (algorithm) => {\n//     this.setState({ algorithm }, this.generateRandomArray);\n//   };\n\n//   handleArraySizeChange = (size) => {\n//     size = Number(size);\n//     size = size > 50 ? 50 : size;\n//     size = size < 0 ? 0 : size;\n//     this.setState({ arraySize: size }, this.generateRandomArray);\n//   };\n\n//   createTrace = () => {\n//     const numbers = [...this.state.array];\n//     const sort = this.ALGORITHM[this.state.algorithm];\n//     if (sort) {\n//       const trace = sort(numbers);\n//       this.setState({ trace });\n//     }\n//   };\n\n//   render() {\n//     let theme = `App`;\n//     if (this.state.appDrawerOpen) theme += ` App_modal_open`;\n\n//     const colorKey = this.ALGORITHM_KEY[this.state.algorithm];\n//     const desc = this.ALGORITHM_DESC[this.state.algorithm];\n\n//     const controls = (\n//       <AppControls\n//         onGenerateRandomArray={this.generateRandomArray}\n//         algorithm={this.state.algorithm}\n//         onAlgorithmChange={this.handleAlgorithmChange}\n//         arraySize={this.state.arraySize}\n//         onArraySizeChange={this.handleArraySizeChange}\n//       />\n//     );\n\n//     return (\n//       <div className={theme}>\n//         <TopBar\n//           drawerOpen={this.state.appDrawerOpen}\n//           toggleDrawer={this.toggleAppDrawer}\n//         >\n//           {controls}\n//         </TopBar>\n\n\n//         <main className=\"App__Body\">\n//           <SortVisualizer\n//             array={this.state.array}\n//             trace={this.state.trace}\n//             colorKey={colorKey}\n//             desc={desc}\n//           />\n//         </main>\n//         <Footer />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}