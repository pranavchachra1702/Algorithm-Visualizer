{"ast":null,"code":"var _jsxFileName = \"/Users/pranavchachra/Desktop/sort-visualizer-master/src/algorithms/BubbleSort.js\";\nimport React from 'react';\nimport { swap, newTrace, addToTrace, lastSorted, createKey } from './helpers';\n\nconst BubbleSort = nums => {\n  const trace = newTrace(nums);\n\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums.length - i - 1; j++) {\n      addToTrace(trace, nums, lastSorted(trace), [j, j + 1]);\n\n      if (nums[j] > nums[j + 1]) {\n        swap(nums, j, j + 1);\n        addToTrace(trace, nums, lastSorted(trace), [], [j, j + 1]);\n      }\n    }\n\n    addToTrace(trace, nums, [...lastSorted(trace), nums.length - 1 - i]);\n  }\n\n  return trace;\n};\n\nexport const BubbleSortKey = createKey('Comparing', 'Swapping');\nexport const BubbleSortDesc = {\n  title: 'Bubble Sorting',\n  description: React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Bubble Sorting is a sorting algorithm that repeatedly swaps adjacent elements of an array until they are not in the intended order. It is called bubble sort because the movement of array elements is just like the movement of air bubbles in the water. Bubbles in water rise up to the surface, similarly, the array elements in bubble sort move to the end in each iteration.\"),\n  worstCase: React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"O(n\", React.createElement(\"sup\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"2\"), \")\"),\n  avgCase: React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"O(n\", React.createElement(\"sup\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"2\"), \")\"),\n  bestCase: React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"O(n)\"),\n  space: React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"O(1)\")\n};\nexport default BubbleSort;","map":{"version":3,"sources":["/Users/pranavchachra/Desktop/sort-visualizer-master/src/algorithms/BubbleSort.js"],"names":["React","swap","newTrace","addToTrace","lastSorted","createKey","BubbleSort","nums","trace","i","length","j","BubbleSortKey","BubbleSortDesc","title","description","worstCase","avgCase","bestCase","space"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,IADF,EAEEC,QAFF,EAGEC,UAHF,EAIEC,UAJF,EAKEC,SALF,QAMO,WANP;;AAQA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAC3B,QAAMC,KAAK,GAAGN,QAAQ,CAACK,IAAD,CAAtB;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EACA;AACE,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACG,MAAL,GAAcD,CAAd,GAAkB,CAAtC,EAAyCE,CAAC,EAA1C,EACA;AACER,MAAAA,UAAU,CAACK,KAAD,EAAQD,IAAR,EAAcH,UAAU,CAACI,KAAD,CAAxB,EAAiC,CAACG,CAAD,EAAIA,CAAC,GAAG,CAAR,CAAjC,CAAV;;AACA,UAAIJ,IAAI,CAACI,CAAD,CAAJ,GAAUJ,IAAI,CAACI,CAAC,GAAG,CAAL,CAAlB,EACA;AACEV,QAAAA,IAAI,CAACM,IAAD,EAAOI,CAAP,EAAUA,CAAC,GAAG,CAAd,CAAJ;AACAR,QAAAA,UAAU,CAACK,KAAD,EAAQD,IAAR,EAAcH,UAAU,CAACI,KAAD,CAAxB,EAAiC,EAAjC,EAAqC,CAACG,CAAD,EAAIA,CAAC,GAAG,CAAR,CAArC,CAAV;AACD;AACF;;AACDR,IAAAA,UAAU,CAACK,KAAD,EAAQD,IAAR,EAAc,CACtB,GAAGH,UAAU,CAACI,KAAD,CADS,EAEtBD,IAAI,CAACG,MAAL,GAAc,CAAd,GAAkBD,CAFI,CAAd,CAAV;AAID;;AAED,SAAOD,KAAP;AACD,CArBD;;AAuBA,OAAO,MAAMI,aAAa,GAAGP,SAAS,CAAC,WAAD,EAAc,UAAd,CAA/B;AACP,OAAO,MAAMQ,cAAc,GAAG;AAC5BC,EAAAA,KAAK,EAAE,gBADqB;AAE5BC,EAAAA,WAAW,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2XAH0B;AAO5BC,EAAAA,SAAS,EACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADL,MAR0B;AAY5BC,EAAAA,OAAO,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADL,MAb0B;AAiB5BC,EAAAA,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBkB;AAkB5BC,EAAAA,KAAK,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlBqB,CAAvB;AAoBP,eAAeb,UAAf","sourcesContent":["import React from 'react';\nimport {\n  swap,\n  newTrace,\n  addToTrace,\n  lastSorted,\n  createKey\n} from './helpers';\n\nconst BubbleSort = (nums) => {\n  const trace = newTrace(nums);\n\n  for (let i = 0; i < nums.length; i++)\n  {\n    for (let j = 0; j < nums.length - i - 1; j++)\n    {\n      addToTrace(trace, nums, lastSorted(trace), [j, j + 1]);\n      if (nums[j] > nums[j + 1])\n      {\n        swap(nums, j, j + 1);\n        addToTrace(trace, nums, lastSorted(trace), [], [j, j + 1]);\n      }\n    }\n    addToTrace(trace, nums, [\n      ...lastSorted(trace),\n      nums.length - 1 - i\n    ]);\n  }\n\n  return trace;\n};\n\nexport const BubbleSortKey = createKey('Comparing', 'Swapping');\nexport const BubbleSortDesc = {\n  title: 'Bubble Sorting',\n  description: (\n    <p>\n      Bubble Sorting is a sorting algorithm that repeatedly swaps adjacent elements of an array until they are not in the intended order. It is called bubble sort because the movement of array elements is just like the movement of air bubbles in the water. Bubbles in water rise up to the surface, similarly, the array elements in bubble sort move to the end in each iteration.\n    </p>\n  ),\n  worstCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  bestCase: <span>O(n)</span>,\n  space: <span>O(1)</span>\n};\nexport default BubbleSort;"]},"metadata":{},"sourceType":"module"}