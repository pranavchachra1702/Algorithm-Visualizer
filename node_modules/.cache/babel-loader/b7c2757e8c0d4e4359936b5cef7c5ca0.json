{"ast":null,"code":"var _jsxFileName = \"/Users/pranavchachra/Desktop/sort-visualizer-master/src/components/organisms/SortChart/index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\nimport Bar from '../../atoms/Bar';\n\nconst getListOfBars = (numbers, maxNum, groupA, groupB, groupC, groupD, sortedIndices) => {\n  return numbers.map((num, i) => {\n    let width = 100 / numbers.length;\n    let height = num / maxNum * 100;\n    let stateA = groupA.includes(i);\n    let stateB = groupB.includes(i);\n    let stateC = groupC.includes(i);\n    let stateD = groupD.includes(i);\n    let sorted = sortedIndices.includes(i);\n    let margin = i === numbers.length ? '0' : width > 3 ? '0.5rem' : '0.125rem';\n    return React.createElement(Bar, {\n      key: \"\".concat(i, \"_\").concat(num),\n      width: width,\n      height: height,\n      val: width > 4 ? num : null,\n      stateA: stateA,\n      stateB: stateB,\n      stateC: stateC,\n      stateD: stateD,\n      sorted: sorted,\n      style: {\n        marginRight: \"\".concat(margin)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    });\n  });\n};\n\nconst SortChart = ({\n  numbers,\n  maxNum,\n  groupA,\n  groupB,\n  groupC,\n  groupD,\n  sortedIndices\n}) => {\n  return React.createElement(\"div\", {\n    className: \"SortChart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, getListOfBars(numbers, maxNum, groupA, groupB, groupC, groupD, sortedIndices));\n};\n\nSortChart.propTypes = {\n  numbers: PropTypes.arrayOf(PropTypes.number),\n  maxNum: PropTypes.number,\n  groupA: PropTypes.arrayOf(PropTypes.number),\n  groupB: PropTypes.arrayOf(PropTypes.number),\n  groupC: PropTypes.arrayOf(PropTypes.number),\n  groupD: PropTypes.arrayOf(PropTypes.number),\n  sortedIndices: PropTypes.arrayOf(PropTypes.number)\n};\nexport default SortChart;","map":{"version":3,"sources":["/Users/pranavchachra/Desktop/sort-visualizer-master/src/components/organisms/SortChart/index.js"],"names":["React","PropTypes","Bar","getListOfBars","numbers","maxNum","groupA","groupB","groupC","groupD","sortedIndices","map","num","i","width","length","height","stateA","includes","stateB","stateC","stateD","sorted","margin","marginRight","SortChart","propTypes","arrayOf","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\n\nimport Bar from '../../atoms/Bar';\n\nconst getListOfBars = (\n  numbers,\n  maxNum,\n  groupA,\n  groupB,\n  groupC,\n  groupD,\n  sortedIndices\n) => {\n  return numbers.map((num, i) => {\n    let width = 100 / numbers.length;\n    let height = (num / maxNum) * 100;\n    let stateA = groupA.includes(i);\n    let stateB = groupB.includes(i);\n    let stateC = groupC.includes(i);\n    let stateD = groupD.includes(i);\n    let sorted = sortedIndices.includes(i);\n\n    let margin =\n      i === numbers.length ? '0' : width > 3 ? '0.5rem' : '0.125rem';\n    return (\n      <Bar\n        key={`${i}_${num}`}\n        width={width}\n        height={height}\n        val={width > 4 ? num : null}\n        stateA={stateA}\n        stateB={stateB}\n        stateC={stateC}\n        stateD={stateD}\n        sorted={sorted}\n        style={{ marginRight: `${margin}` }}\n      />\n    );\n  });\n};\n\nconst SortChart = ({\n  numbers,\n  maxNum,\n  groupA,\n  groupB,\n  groupC,\n  groupD,\n  sortedIndices\n}) => {\n  return (\n    <div className=\"SortChart\">\n      {getListOfBars(\n        numbers,\n        maxNum,\n        groupA,\n        groupB,\n        groupC,\n        groupD,\n        sortedIndices\n      )}\n    </div>\n  );\n};\n\nSortChart.propTypes = {\n  numbers: PropTypes.arrayOf(PropTypes.number),\n  maxNum: PropTypes.number,\n  groupA: PropTypes.arrayOf(PropTypes.number),\n  groupB: PropTypes.arrayOf(PropTypes.number),\n  groupC: PropTypes.arrayOf(PropTypes.number),\n  groupD: PropTypes.arrayOf(PropTypes.number),\n  sortedIndices: PropTypes.arrayOf(PropTypes.number)\n};\n\nexport default SortChart;\n"]},"metadata":{},"sourceType":"module"}