{"ast":null,"code":"var _jsxFileName = \"/Users/pranavchachra/Desktop/Algorithm-Visualizer/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport AppControls from './components/AppControls';\nimport TopBar from './components/TopBar';\nimport SortVisualizer from './components/SortVisualizer';\nimport Footer from './components/Footer';\nimport BubbleSort, { BubbleSortKey, BubbleSortDesc } from './algorithms/BubbleSort';\nimport SelectionSort, { SelectionSortKey, SelectionSortDesc } from './algorithms/SelectionSort';\nimport InsertionSort, { InsertionSortKey, InsertionSortDesc } from './algorithms/InsertionSort';\nimport MergeSort, { MergeSortKey, MergeSortDesc } from './algorithms/MergeSort';\nimport QuickSort, { QuickSortKey, QuickSortDesc } from './algorithms/QuickSort';\nimport HeapSort, { HeapSortKey, HeapSortDesc } from './algorithms/HeapSort';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      array: [],\n      arraySize: 10,\n      trace: [],\n      algorithm: null,\n      appDrawerOpen: false\n    };\n    this.ALGORITHM = {\n      'Bubble Sort': BubbleSort,\n      'Selection Sort': SelectionSort,\n      'Insertion Sort': InsertionSort,\n      'Merge Sort': MergeSort,\n      'Quick Sort': QuickSort,\n      'Heap Sort': HeapSort\n    };\n    this.ALGORITHM_KEY = {\n      'Bubble Sort': BubbleSortKey,\n      'Selection Sort': SelectionSortKey,\n      'Insertion Sort': InsertionSortKey,\n      'Merge Sort': MergeSortKey,\n      'Quick Sort': QuickSortKey,\n      'Heap Sort': HeapSortKey\n    };\n    this.ALGORITHM_DESC = {\n      'Bubble Sort': BubbleSortDesc,\n      'Selection Sort': SelectionSortDesc,\n      'Insertion Sort': InsertionSortDesc,\n      'Merge Sort': MergeSortDesc,\n      'Quick Sort': QuickSortDesc,\n      'Heap Sort': HeapSortDesc\n    };\n\n    this.generateRandomArray = () => {\n      // Generate pseudo-random number between 1 and max\n      function getRandomInt(max) {\n        return Math.floor(Math.random() * Math.floor(max)) + 4;\n      } // Generate an array of length max\n\n\n      const array = Array(this.state.arraySize).fill(0).map(() => getRandomInt(this.state.arraySize * 5));\n      this.setState({\n        array,\n        trace: []\n      }, this.createTrace);\n    };\n\n    this.handleAlgorithmChange = algorithm => {\n      this.setState({\n        algorithm\n      }, this.generateRandomArray);\n    };\n\n    this.handleArraySizeChange = size => {\n      size = Number(size);\n      size = size > 50 ? 50 : size;\n      size = size < 0 ? 0 : size;\n      this.setState({\n        arraySize: size\n      }, this.generateRandomArray);\n    };\n\n    this.createTrace = () => {\n      const numbers = [...this.state.array];\n      const sort = this.ALGORITHM[this.state.algorithm];\n\n      if (sort) {\n        const trace = sort(numbers);\n        this.setState({\n          trace\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.generateRandomArray();\n  }\n\n  render() {\n    let theme = \"App\";\n    if (this.state.appDrawerOpen) theme += \" App_modal_open\";\n    const colorKey = this.ALGORITHM_KEY[this.state.algorithm];\n    const desc = this.ALGORITHM_DESC[this.state.algorithm];\n    const controls = React.createElement(AppControls, {\n      onGenerateRandomArray: this.generateRandomArray,\n      algorithm: this.state.algorithm,\n      onAlgorithmChange: this.handleAlgorithmChange,\n      arraySize: this.state.arraySize,\n      onArraySizeChange: this.handleArraySizeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(TopBar, {\n      drawerOpen: this.state.appDrawerOpen,\n      toggleDrawer: this.toggleAppDrawer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, controls), React.createElement(\"main\", {\n      className: \"App__Body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(SortVisualizer, {\n      array: this.state.array,\n      trace: this.state.trace,\n      colorKey: colorKey,\n      desc: desc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pranavchachra/Desktop/Algorithm-Visualizer/src/App.js"],"names":["React","Component","AppControls","TopBar","SortVisualizer","Footer","BubbleSort","BubbleSortKey","BubbleSortDesc","SelectionSort","SelectionSortKey","SelectionSortDesc","InsertionSort","InsertionSortKey","InsertionSortDesc","MergeSort","MergeSortKey","MergeSortDesc","QuickSort","QuickSortKey","QuickSortDesc","HeapSort","HeapSortKey","HeapSortDesc","App","state","array","arraySize","trace","algorithm","appDrawerOpen","ALGORITHM","ALGORITHM_KEY","ALGORITHM_DESC","generateRandomArray","getRandomInt","max","Math","floor","random","Array","fill","map","setState","createTrace","handleAlgorithmChange","handleArraySizeChange","size","Number","numbers","sort","componentDidMount","render","theme","colorKey","desc","controls","toggleAppDrawer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport AppControls from './components/AppControls';\nimport TopBar from './components/TopBar';\nimport SortVisualizer from './components/SortVisualizer';\nimport Footer from './components/Footer';\n\nimport BubbleSort, {\n  BubbleSortKey,\n  BubbleSortDesc\n} from './algorithms/BubbleSort';\nimport SelectionSort, {\n  SelectionSortKey,\n  SelectionSortDesc\n} from './algorithms/SelectionSort';\nimport InsertionSort, {\n  InsertionSortKey,\n  InsertionSortDesc\n} from './algorithms/InsertionSort';\nimport MergeSort, {\n  MergeSortKey,\n  MergeSortDesc\n} from './algorithms/MergeSort';\nimport QuickSort, {\n  QuickSortKey,\n  QuickSortDesc\n} from './algorithms/QuickSort';\nimport HeapSort, {\n  HeapSortKey,\n  HeapSortDesc\n} from './algorithms/HeapSort';\n\nclass App extends Component {\n  state = {\n    array: [],\n    arraySize: 10,\n    trace: [],\n    algorithm: null,\n    appDrawerOpen: false\n  };\n\n  ALGORITHM = {\n    'Bubble Sort': BubbleSort,\n    'Selection Sort': SelectionSort,\n    'Insertion Sort': InsertionSort,\n    'Merge Sort': MergeSort,\n    'Quick Sort': QuickSort,\n    'Heap Sort': HeapSort\n  };\n\n  ALGORITHM_KEY = {\n    'Bubble Sort': BubbleSortKey,\n    'Selection Sort': SelectionSortKey,\n    'Insertion Sort': InsertionSortKey,\n    'Merge Sort': MergeSortKey,\n    'Quick Sort': QuickSortKey,\n    'Heap Sort': HeapSortKey\n  };\n\n  ALGORITHM_DESC = {\n    'Bubble Sort': BubbleSortDesc,\n    'Selection Sort': SelectionSortDesc,\n    'Insertion Sort': InsertionSortDesc,\n    'Merge Sort': MergeSortDesc,\n    'Quick Sort': QuickSortDesc,\n    'Heap Sort': HeapSortDesc\n  };\n\n  componentDidMount() {\n    this.generateRandomArray();\n  }\n\n  generateRandomArray = () => {\n    // Generate pseudo-random number between 1 and max\n    function getRandomInt(max) {\n      return Math.floor(Math.random() * Math.floor(max)) + 4;\n    }\n\n    // Generate an array of length max\n    const array = Array(this.state.arraySize)\n      .fill(0)\n      .map(() => getRandomInt(this.state.arraySize * 5));\n\n    this.setState(\n      {\n        array,\n        trace: []\n      },\n      this.createTrace\n    );\n  };\n\n  handleAlgorithmChange = (algorithm) => {\n    this.setState({ algorithm }, this.generateRandomArray);\n  };\n\n  handleArraySizeChange = (size) => {\n    size = Number(size);\n    size = size > 50 ? 50 : size;\n    size = size < 0 ? 0 : size;\n    this.setState({ arraySize: size }, this.generateRandomArray);\n  };\n\n  createTrace = () => {\n    const numbers = [...this.state.array];\n    const sort = this.ALGORITHM[this.state.algorithm];\n    if (sort) {\n      const trace = sort(numbers);\n      this.setState({ trace });\n    }\n  };\n\n  render() {\n    let theme = `App`;\n    if (this.state.appDrawerOpen) theme += ` App_modal_open`;\n\n    const colorKey = this.ALGORITHM_KEY[this.state.algorithm];\n    const desc = this.ALGORITHM_DESC[this.state.algorithm];\n\n    const controls = (\n      <AppControls\n        onGenerateRandomArray={this.generateRandomArray}\n        algorithm={this.state.algorithm}\n        onAlgorithmChange={this.handleAlgorithmChange}\n        arraySize={this.state.arraySize}\n        onArraySizeChange={this.handleArraySizeChange}\n      />\n    );\n\n    return (\n      <div className={theme}>\n        <TopBar\n          drawerOpen={this.state.appDrawerOpen}\n          toggleDrawer={this.toggleAppDrawer}\n        >\n          {controls}\n        </TopBar>\n\n\n        <main className=\"App__Body\">\n          <SortVisualizer\n            array={this.state.array}\n            trace={this.state.trace}\n            colorKey={colorKey}\n            desc={desc}\n          />\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}